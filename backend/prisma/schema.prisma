// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  LEADER
  MEMBER
}

enum RequestStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  WITHDRAWAL
}

model super_admin {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String
  refreshToken String?
  accessToken  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cohort_details cohort_details[]
}

model cohort_details {
  id            String   @id @default(ulid())
  cohort_name   String   @unique
  cohort_desc   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  super_adminId String

  createBy super_admin @relation(fields: [super_adminId], references: [id], onDelete: Cascade)
}

model student_details {
  id                        String    @id @default(uuid())
  email                     String    @unique
  password                  String
  cohort_name               String
  role                      UserRole
  github_link               String?
  hashnode_link             String?
  peerlist_link             String?
  tweeter_link              String?
  refreshToken              String?
  accessToken               String?
  emailVerificationToken    String?
  emailVerificationExpiry   DateTime?
  canCreateGroup            Boolean   @default(true)
  isGroupJoined             Boolean   @default(false)
  isEmailVerified           Boolean   @default(false)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  group_details        group_details[]
  notice_board_details notice_board_details[]
}

model group_details {
  id          String   @id @default(uuid())
  group_name  String
  group_desc  String
  student_Id  String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy            student_details        @relation(fields: [student_Id], references: [id], onDelete: Cascade)
  notice_board_details notice_board_details[]
}

model notice_board_details {
  id         String   @id @default(uuid())
  board_text String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  student_Id String
  group_Id   String

  createdBy student_details @relation(fields: [student_Id], references: [id], onDelete: Cascade)
  belong_To group_details   @relation(fields: [group_Id], references: [id], onDelete: Cascade)
}

model student_group_mapping_details {
  id             String    @id @default(uuid())
  group_Id       String
  student_Id     String
  joining_date   DateTime?
  leaving_date   DateTime?
  removed_reason DateTime?
  removed_date   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model student_cohort_mapping_details {
  id         String   @id @default(uuid())
  student_Id String
  cohort_Id  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model group_joining_request_details {
  id                      String        @id @default(uuid())
  student_Id              String
  group_Id                String
  status                  RequestStatus
  request_note_by_student String
  rejection_remark        String?
  requestd_on             DateTime?
  responded_on            DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

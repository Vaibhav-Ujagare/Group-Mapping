// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  LEADER
  MEMBER
}

enum RequestStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  WITHDRAWAL
}

enum AuditAction {
  CREATED
  UPDATED
  DELETED
  REMOVED
  JOINED
  LEFT
}

model super_admin {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  refreshToken String?
  accessToken  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cohort_details cohort_details[]
}

model cohort_details {
  id            String   @id @default(ulid())
  cohort_name   String   @unique
  cohort_desc   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  super_adminId String

  createdBy                      super_admin                      @relation(fields: [super_adminId], references: [id], onDelete: Cascade)
  student_cohort_mapping_details student_cohort_mapping_details[]
}

model student_details {
  id                        String    @id @default(uuid())
  email                     String    @unique
  password                  String
  cohort_name               String
  role                      UserRole
  github_link               String?
  hashnode_link             String?
  peerlist_link             String?
  tweeter_link              String?
  refreshToken              String?
  accessToken               String?
  canCreateGroup            Boolean   @default(true)
  isGroupJoined             Boolean   @default(false)
  canEditNoticeBoard        Boolean   @default(false)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  group_details                  group_details[]
  notice_board_details           notice_board_details[]
  student_group_mapping_details  student_group_mapping_details[]
  student_cohort_mapping_details student_cohort_mapping_details[]
  group_joining_request_details  group_joining_request_details[]
  notice_board_audit_log         notice_board_audit_log[]
  group_user_audit_log           group_user_audit_log[]
}

model group_details {
  id          String   @id @default(uuid())
  group_name  String
  group_desc  String
  createdById String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy                     student_details                 @relation(fields: [createdById], references: [id], onDelete: Cascade)
  notice_board_details          notice_board_details[]
  student_group_mapping_details student_group_mapping_details[]
  group_joining_request_details group_joining_request_details[]
  group_user_audit_log          group_user_audit_log[]
}

model notice_board_details {
  id         String   @id @default(uuid())
  board_text String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  studentId  String
  groupId    String

  createdBy              student_details          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  group                  group_details            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  notice_board_audit_log notice_board_audit_log[]
}

model notice_board_audit_log {
  id            String      @id @default(uuid())
  noticeBoardId String
  actionType    AuditAction
  previousText  String?
  newText       String?
  performedById String
  performedOn   DateTime    @default(now())

  noticeBoard notice_board_details @relation(fields: [noticeBoardId], references: [id], onDelete: Cascade)
  performedBy student_details      @relation(fields: [performedById], references: [id], onDelete: Cascade)
}

model student_group_mapping_details {
  id             String    @id @default(uuid())
  groupId        String
  studentId      String
  joining_date   DateTime?
  leaving_date   DateTime?
  leaving_reason String?
  removed_reason String?
  removed_date   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  student student_details @relation(fields: [studentId], references: [id])
  group   group_details   @relation(fields: [groupId], references: [id])

  @@unique([studentId, groupId])
}

model student_cohort_mapping_details {
  id        String   @id @default(uuid())
  studentId String
  cohortId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student student_details @relation(fields: [studentId], references: [id])
  cohort  cohort_details  @relation(fields: [cohortId], references: [id])

  @@unique([studentId, cohortId])
}

model group_joining_request_details {
  id                      String        @id @default(uuid())
  studentId               String
  groupId                 String
  status                  RequestStatus
  request_note_by_student String
  rejection_remark        String?
  requested_on            DateTime?
  responded_on            DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  student student_details @relation(fields: [studentId], references: [id], onDelete: Cascade)
  group   group_details   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([studentId, groupId])
}

model group_user_audit_log {
  id         String      @id @default(uuid())
  groupId    String
  studentId  String
  createdAt  DateTime    @default(now())
  remarks    String?
  actionType AuditAction

  group   group_details   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student student_details @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // @@unique([groupId, studentId])
}
